# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from transformtrack/DropVelocityRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DropVelocityRequest(genpy.Message):
  _md5sum = "faa0b1c70541a1016cc8927509fb3480"
  _type = "transformtrack/DropVelocityRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time end_time
bool unbias
"""
  __slots__ = ['end_time','unbias']
  _slot_types = ['time','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       end_time,unbias

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DropVelocityRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.end_time is None:
        self.end_time = genpy.Time()
      if self.unbias is None:
        self.unbias = False
    else:
      self.end_time = genpy.Time()
      self.unbias = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IB().pack(_x.end_time.secs, _x.end_time.nsecs, _x.unbias))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.end_time is None:
        self.end_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.end_time.secs, _x.end_time.nsecs, _x.unbias,) = _get_struct_2IB().unpack(str[start:end])
      self.unbias = bool(self.unbias)
      self.end_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IB().pack(_x.end_time.secs, _x.end_time.nsecs, _x.unbias))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.end_time is None:
        self.end_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.end_time.secs, _x.end_time.nsecs, _x.unbias,) = _get_struct_2IB().unpack(str[start:end])
      self.unbias = bool(self.unbias)
      self.end_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IB = None
def _get_struct_2IB():
    global _struct_2IB
    if _struct_2IB is None:
        _struct_2IB = struct.Struct("<2IB")
    return _struct_2IB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from transformtrack/DropVelocityResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DropVelocityResponse(genpy.Message):
  _md5sum = "89bb254424e4cffedbf494e7b0ddbfea"
  _type = "transformtrack/DropVelocityResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool done
"""
  __slots__ = ['done']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       done

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DropVelocityResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.done is None:
        self.done = False
    else:
      self.done = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.done
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.done,) = _get_struct_B().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.done
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.done,) = _get_struct_B().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class DropVelocity(object):
  _type          = 'transformtrack/DropVelocity'
  _md5sum = '2b47bafdc4c00e27a7f0cfd76dc9037e'
  _request_class  = DropVelocityRequest
  _response_class = DropVelocityResponse
