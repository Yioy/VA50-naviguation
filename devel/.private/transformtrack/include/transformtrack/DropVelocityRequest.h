// Generated by gencpp from file transformtrack/DropVelocityRequest.msg
// DO NOT EDIT!


#ifndef TRANSFORMTRACK_MESSAGE_DROPVELOCITYREQUEST_H
#define TRANSFORMTRACK_MESSAGE_DROPVELOCITYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace transformtrack
{
template <class ContainerAllocator>
struct DropVelocityRequest_
{
  typedef DropVelocityRequest_<ContainerAllocator> Type;

  DropVelocityRequest_()
    : end_time()
    , unbias(false)  {
    }
  DropVelocityRequest_(const ContainerAllocator& _alloc)
    : end_time()
    , unbias(false)  {
  (void)_alloc;
    }



   typedef ros::Time _end_time_type;
  _end_time_type end_time;

   typedef uint8_t _unbias_type;
  _unbias_type unbias;





  typedef boost::shared_ptr< ::transformtrack::DropVelocityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::transformtrack::DropVelocityRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DropVelocityRequest_

typedef ::transformtrack::DropVelocityRequest_<std::allocator<void> > DropVelocityRequest;

typedef boost::shared_ptr< ::transformtrack::DropVelocityRequest > DropVelocityRequestPtr;
typedef boost::shared_ptr< ::transformtrack::DropVelocityRequest const> DropVelocityRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::transformtrack::DropVelocityRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::transformtrack::DropVelocityRequest_<ContainerAllocator1> & lhs, const ::transformtrack::DropVelocityRequest_<ContainerAllocator2> & rhs)
{
  return lhs.end_time == rhs.end_time &&
    lhs.unbias == rhs.unbias;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::transformtrack::DropVelocityRequest_<ContainerAllocator1> & lhs, const ::transformtrack::DropVelocityRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace transformtrack

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transformtrack::DropVelocityRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transformtrack::DropVelocityRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transformtrack::DropVelocityRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "faa0b1c70541a1016cc8927509fb3480";
  }

  static const char* value(const ::transformtrack::DropVelocityRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfaa0b1c70541a101ULL;
  static const uint64_t static_value2 = 0x6cc8927509fb3480ULL;
};

template<class ContainerAllocator>
struct DataType< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "transformtrack/DropVelocityRequest";
  }

  static const char* value(const ::transformtrack::DropVelocityRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time end_time\n"
"bool unbias\n"
;
  }

  static const char* value(const ::transformtrack::DropVelocityRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.end_time);
      stream.next(m.unbias);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DropVelocityRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::transformtrack::DropVelocityRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::transformtrack::DropVelocityRequest_<ContainerAllocator>& v)
  {
    s << indent << "end_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.end_time);
    s << indent << "unbias: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.unbias);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANSFORMTRACK_MESSAGE_DROPVELOCITYREQUEST_H
