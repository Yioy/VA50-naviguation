// Generated by gencpp from file transformtrack/TransformBatchRequest.msg
// DO NOT EDIT!


#ifndef TRANSFORMTRACK_MESSAGE_TRANSFORMBATCHREQUEST_H
#define TRANSFORMTRACK_MESSAGE_TRANSFORMBATCHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace transformtrack
{
template <class ContainerAllocator>
struct TransformBatchRequest_
{
  typedef TransformBatchRequest_<ContainerAllocator> Type;

  TransformBatchRequest_()
    : start_times()
    , end_time()  {
    }
  TransformBatchRequest_(const ContainerAllocator& _alloc)
    : start_times(_alloc)
    , end_time()  {
  (void)_alloc;
    }



   typedef std::vector<ros::Time, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<ros::Time>> _start_times_type;
  _start_times_type start_times;

   typedef ros::Time _end_time_type;
  _end_time_type end_time;





  typedef boost::shared_ptr< ::transformtrack::TransformBatchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::transformtrack::TransformBatchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TransformBatchRequest_

typedef ::transformtrack::TransformBatchRequest_<std::allocator<void> > TransformBatchRequest;

typedef boost::shared_ptr< ::transformtrack::TransformBatchRequest > TransformBatchRequestPtr;
typedef boost::shared_ptr< ::transformtrack::TransformBatchRequest const> TransformBatchRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::transformtrack::TransformBatchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::transformtrack::TransformBatchRequest_<ContainerAllocator1> & lhs, const ::transformtrack::TransformBatchRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start_times == rhs.start_times &&
    lhs.end_time == rhs.end_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::transformtrack::TransformBatchRequest_<ContainerAllocator1> & lhs, const ::transformtrack::TransformBatchRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace transformtrack

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transformtrack::TransformBatchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transformtrack::TransformBatchRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transformtrack::TransformBatchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bdba198c1efa142b516a98e81cf09cee";
  }

  static const char* value(const ::transformtrack::TransformBatchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbdba198c1efa142bULL;
  static const uint64_t static_value2 = 0x516a98e81cf09ceeULL;
};

template<class ContainerAllocator>
struct DataType< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "transformtrack/TransformBatchRequest";
  }

  static const char* value(const ::transformtrack::TransformBatchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time[] start_times\n"
"time end_time\n"
;
  }

  static const char* value(const ::transformtrack::TransformBatchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_times);
      stream.next(m.end_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransformBatchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::transformtrack::TransformBatchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::transformtrack::TransformBatchRequest_<ContainerAllocator>& v)
  {
    s << indent << "start_times[]" << std::endl;
    for (size_t i = 0; i < v.start_times.size(); ++i)
    {
      s << indent << "  start_times[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.start_times[i]);
    }
    s << indent << "end_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.end_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANSFORMTRACK_MESSAGE_TRANSFORMBATCHREQUEST_H
