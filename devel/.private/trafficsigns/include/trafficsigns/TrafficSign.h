// Generated by gencpp from file trafficsigns/TrafficSign.msg
// DO NOT EDIT!


#ifndef TRAFFICSIGNS_MESSAGE_TRAFFICSIGN_H
#define TRAFFICSIGNS_MESSAGE_TRAFFICSIGN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trafficsigns
{
template <class ContainerAllocator>
struct TrafficSign_
{
  typedef TrafficSign_<ContainerAllocator> Type;

  TrafficSign_()
    : category()
    , type()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , confidence(0.0)  {
    }
  TrafficSign_(const ContainerAllocator& _alloc)
    : category(_alloc)
    , type(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _category_type;
  _category_type category;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _confidence_type;
  _confidence_type confidence;





  typedef boost::shared_ptr< ::trafficsigns::TrafficSign_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trafficsigns::TrafficSign_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficSign_

typedef ::trafficsigns::TrafficSign_<std::allocator<void> > TrafficSign;

typedef boost::shared_ptr< ::trafficsigns::TrafficSign > TrafficSignPtr;
typedef boost::shared_ptr< ::trafficsigns::TrafficSign const> TrafficSignConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trafficsigns::TrafficSign_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trafficsigns::TrafficSign_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trafficsigns::TrafficSign_<ContainerAllocator1> & lhs, const ::trafficsigns::TrafficSign_<ContainerAllocator2> & rhs)
{
  return lhs.category == rhs.category &&
    lhs.type == rhs.type &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trafficsigns::TrafficSign_<ContainerAllocator1> & lhs, const ::trafficsigns::TrafficSign_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trafficsigns

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trafficsigns::TrafficSign_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trafficsigns::TrafficSign_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trafficsigns::TrafficSign_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trafficsigns::TrafficSign_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trafficsigns::TrafficSign_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trafficsigns::TrafficSign_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trafficsigns::TrafficSign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cce144ea2124a75281ff7e5d5f7d931e";
  }

  static const char* value(const ::trafficsigns::TrafficSign_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcce144ea2124a752ULL;
  static const uint64_t static_value2 = 0x81ff7e5d5f7d931eULL;
};

template<class ContainerAllocator>
struct DataType< ::trafficsigns::TrafficSign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trafficsigns/TrafficSign";
  }

  static const char* value(const ::trafficsigns::TrafficSign_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trafficsigns::TrafficSign_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string category\n"
"string type\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 confidence\n"
;
  }

  static const char* value(const ::trafficsigns::TrafficSign_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trafficsigns::TrafficSign_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.category);
      stream.next(m.type);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficSign_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trafficsigns::TrafficSign_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trafficsigns::TrafficSign_<ContainerAllocator>& v)
  {
    s << indent << "category: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.category);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAFFICSIGNS_MESSAGE_TRAFFICSIGN_H
